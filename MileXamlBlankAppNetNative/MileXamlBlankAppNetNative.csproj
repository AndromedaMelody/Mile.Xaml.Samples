<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"/>

  <PropertyGroup>
    <PlatformTarget Condition="'$(Platform)' == 'x86'">x86</PlatformTarget>
    <PlatformTarget Condition="'$(Platform)' == 'x64'">x64</PlatformTarget>
    <PlatformTarget Condition="'$(Platform)' == 'ARM64'">ARM64</PlatformTarget>
  </PropertyGroup>

  <PropertyGroup>
    <ProjectGuid>{1A2D0314-E0C4-46EF-BDBC-4E2D778E3D3B}</ProjectGuid>

    <!-- Undocumented -->
    <!-- You can set OutputType = AppContainerExe or WinExe -->
    <!-- Although OutputType = AppContainerExe, Your Program is still able to run in unpackage mode -->
    <!-- Although OutputType = WinExe, Your Program can be still compiled by .Net Native Compiler -->
    <OutputType>AppContainerExe</OutputType>
    <!-- Or <OutputType>WinExe</OutputType> -->

    <RootNamespace>MileXamlBlankAppNetNative</RootNamespace>
    <DefaultLanguage>en-US</DefaultLanguage>
    <TargetPlatformIdentifier>UAP</TargetPlatformIdentifier>
    <TargetPlatformVersion>10.0.22621.0</TargetPlatformVersion>
    <TargetPlatformMinVersion>10.0.19041.0</TargetPlatformMinVersion>
    <MinimumVisualStudioVersion>17</MinimumVisualStudioVersion>

    <!-- Undocumented -->
    <!-- If the guid contains 'A5A43C5B...', the project will be a Single-project MSIX packaging project -->
    <!-- If you want don't want to package AppX/MSIX, remeber final output is located in '%OutputPath%\ilc'
         - set UseDotNetNativeSharedAssemblyFrameworkPackage = true
         - add activatableClass nodes in ApplicationManifest
         - copy FrameworkDLL(mrt100_app.dll), UCRT(vcruntime140_app.dll), etc...
         - remove their 'AppContainer' flag -->
    <ProjectTypeGuids>{A5A43C5B-DE2A-4C0C-9213-0A381AF9435A};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <!-- Or <ProjectTypeGuids>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids> -->

    <WindowsXamlEnableOverview>true</WindowsXamlEnableOverview>
    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>
    <OutputPath Condition="'$(OutputPath)' == '' and '$(PlatformName)' != 'AnyCPU'">bin\$(Platform)\$(Configuration)\</OutputPath>
    <NoWarn>$(NoWarn);2008</NoWarn>
    <ErrorReport>prompt</ErrorReport>
    <Prefer32Bit>false</Prefer32Bit>
    <DefineConstants>TRACE;NETFX_CORE;WINDOWS_UWP</DefineConstants>

    <!-- Undocumented -->
    <!-- Must set AppxPackage = true, otherwise .Net Native Compiler won't work -->
    <!-- This property don't decide whether package or not in .Net Native Toolchain -->
    <!-- If you don't want to package AppX/MSIX, please modify ProjectTypeGuids -->
    <AppxPackage>true</AppxPackage>

  </PropertyGroup>

  <PropertyGroup>
    <LangVersion>latest</LangVersion>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <ApplicationManifest>Properties\Program.manifest</ApplicationManifest>
    <EnableUnmanagedDebugging>true</EnableUnmanagedDebugging>

    <!-- Known issue: Can't Start with Debugger in Visual Studio -->
    <DoNotLaunchApp>true</DoNotLaunchApp>

  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DebugSymbols>true</DebugSymbols>
    <DefineConstants>DEBUG;$(DefineConstants)</DefineConstants>
    <DebugType>full</DebugType>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>
  </PropertyGroup>

  <!-- Undocumented, but listed in the build metadata of AppxManifst after deloying. -->
  <PropertyGroup>

    <!-- If you want to make program self-containe dependencies, set UseDotNetNativeSharedAssemblyFrameworkPackage = false -->
    <!-- Remeber delete the nodes of AppX/MSIX framework packages in AppxManifest.xml, they are generated automatically by Appx Toolchain. -->
    <UseDotNetNativeSharedAssemblyFrameworkPackage>true</UseDotNetNativeSharedAssemblyFrameworkPackage>

    <Use64BitCompiler>true</Use64BitCompiler>
    <OptimizeForSize Condition="'$(Configuration)' == 'Release'">true</OptimizeForSize>
  </PropertyGroup>

  <!-- Undocumented -->
  <PropertyGroup>

    <!-- Use Custom Main Method -->
    <DefineConstants Condition="!$(DefineConstants.Contains(&quot;DISABLE_XAML_GENERATED_MAIN&quot;))">$(DefineConstants);DISABLE_XAML_GENERATED_MAIN</DefineConstants>

    <!-- Allow runFullTrust -->
    <SkipAppxManifestValidation>true</SkipAppxManifestValidation>

  </PropertyGroup>

  <!-- Undocumented -->
  <!-- Use .Net Native Toolchain in Debug Mode -->
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <UseDotNetNativeToolchain>true</UseDotNetNativeToolchain>
    <UseDotNetNativeIncremental>true</UseDotNetNativeIncremental>
    <EnableNetNativeDeveloperExperienceMode>true</EnableNetNativeDeveloperExperienceMode>
    <UseDotNetNativeSharedAssemblyFrameworkPackage>true</UseDotNetNativeSharedAssemblyFrameworkPackage>
  </PropertyGroup>

  <ItemGroup>
    <ApplicationDefinition Include="App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </ApplicationDefinition>
    <AppxManifest Include="Properties\Package.appxmanifest">
      <SubType>Designer</SubType>
    </AppxManifest>
    <Compile Include="*.cs" Exclude="*.xaml.cs" />
    <Compile Include="*.xaml.cs">
      <DependentUpon>%(FileName)</DependentUpon>
    </Compile>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Content Include="Assets\*" />
    <Content Include="Properties\Default.rd.xml" />
    <None Include="Properties\Program.manifest" />
    <Page Include="*.xaml" Exclude="App.xaml">
      <Generator>MSBuild:Compile</Generator>
      <SubType>Designer</SubType>
    </Page>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETCore.UniversalWindowsPlatform" Version="6.2.14" />
    <PackageReference Include="Mile.Xaml" Version="1.1.434" />
  </ItemGroup>

  <!-- Undocumented -->
  <!-- Allow P/Invoke all Win32 APIs when .Net Native Toolchain is enabled -->
  <!-- .Net Native only support ExactSpelling = true-->
  <Target Name="RemoveWin32ApisWhiteListInNetNative" BeforeTargets="BuildNativePackage" Condition="$(UseDotNetNativeToolchain)">
    <PropertyGroup>
      <_WindowsSDK_SupportedAPIs />
    </PropertyGroup>
  </Target>

  <Import Project="$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v$(VisualStudioVersion)\Microsoft.Windows.UI.Xaml.CSharp.targets" />

  <!-- Undocumented Infomation -->
  <!-- Remove 'AppContainer' flag in .exe/.dll PE header -->
  <!-- Although OutputType != AppContainerExe, 'AppContainer' flag always be in .exe/.dll PE header -->
  <!-- This is a example for Release(Configuration) & not self-Contained dependencies -->
  <!-- In Win11 & newer version of Win10, 'AppContainer' flag have no influence to run in unpackage mode-->
  <!-- Please according to the actual situation -->
  <Target Name="AfterBuild" Condition="'$(Configuration)' == 'Release'">
    <Exec Command="call &quot;$(DevEnvDir)..\Tools\VsDevCmd.bat&quot; -arch=x64 -host_arch=x64
EDITBIN.exe /APPCONTAINER:NO &quot;$(_IlcOutputPath)clrcompression.dll&quot;
EDITBIN.exe /APPCONTAINER:NO &quot;$(_IlcOutputPath)$(TargetFileName)&quot;
EDITBIN.exe /APPCONTAINER:NO &quot;$(_IlcOutputPath)$(TargetFileName.TrimEnd(&quot;exe&quot;))dll&quot;" />
  </Target>

</Project>
